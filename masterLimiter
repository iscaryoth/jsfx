// (C) 2006, Michael Gruhn.

// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.


desc:Master Limiter UI
//tags: dynamics limiter
//author: LOSER
import ui-lib.jsfx-inc
import vu.jsfx-inc
import ui-lib-overlay.jsfx-inc

slider1:-3<-20,-.1,.1>-Threshold (dB)
slider2:200<0,1000,1>-Look Ahead (és)
slider3:100<0,1000,1>-Attack (és)
slider4:0<0,10,.1>-Hold (ms)
slider5:250<0,1000,1>-Release (ms)
slider6:-.1<-6,0,.01>-Limit (dB)
//slider7:0,-Reduction

options:no_meter

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
gain = seekgain = 1;
c_ampdB = 8.65617025;

freemem = ui_setup(1000);
vu_in.vu_stereo_init();
vu_out.vu_stereo_init();

ui_color_accent(0, 169, 133);
//ui_color_accent(255, 239, 23);

function slider_recalc() (
	treshdB = min(slider1,-.1);
	tresh = exp(treshdB/c_ampdB);

	treshdB == -.1 ? (gain = seekgain = 1; );

	look = floor(max( min( slider2/1000000*srate , 500000) , 1));
	attack = exp( -treshdB/max( slider3/1000000*srate , 0) / c_ampdB  ) ;
	hold = slider4/1000*srate;
	under_tresh = 0;
	release = exp( -treshdB/max( slider5/1000*srate , 0) / c_ampdB ) ;

	limit = exp(slider6/c_ampdB);

	mode_make_up = 1;

	volume = limit / (mode_make_up ? tresh : 1);

	seekgain = 1;
	
	__count += 1;
);

@slider
slider_recalc();

@sample
vu_in.vu_stereo_sample(spl0, spl1);

detect = max(abs(spl0),abs(spl1));

bufPos[0] = spl0;
bufPos[look] = spl1;
(bufPos += 1) >= look ? bufPos = 0 ;
spl0 = bufPos[0];
spl1 = bufPos[look];

// Prevent From Preopening, I Know There Might Be Transients In Between, But Fuck'Em :/
detect = max(max(abs(spl0),abs(spl1)),detect);

detect > tresh ? (
    under_tresh = 0;
    hold ? seekgain = min( tresh/detect ,seekgain ) : seekgain = tresh/detect;
):(
    (under_tresh+=1)>hold ? (seekgain = 1; );
);

gain > seekgain ? gain=max(gain/attack,seekgain):gain=min(gain*release,seekgain);

spl0 *= gain * volume;
spl1 *= gain * volume;

// Prevent From Unecessary Distortion, Better Distort Just Once Even Tho Hard :)
max(abs(spl0),abs(spl1)) > limit ? gain = seekgain; // Uber Nifty Metering For This Doesn't Work :(

spl0 = max(min(spl0,limit),-limit);
spl1 = max(min(spl1,limit),-limit); 

vu_out.vu_stereo_sample(spl0, spl1);

slider7 = log(gain)*c_ampdB;
sliderchange(64);

@block
vu_in.vu_stereo_block();
vu_out.vu_stereo_block();

@gfx 570 300

(gfx_w < 570) ? (gfx_w = 570);
(gfx_h < 300) ? (gfx_h = 300);


function gfx_ui_stereometer_slider(name, value, range_low, range_high, curve_bias, hasDefault, defaultValue, format)
	local(sumvalue valueClipped p height handle_height) (
  ui_split_top(30);
    ui_color_text();
    ui_text(name);
  ui_pop();
  
  ui_split_bottom(30);
    ui_color_text();
    sprintf(#uix_meter_value, format, value);
    ui_text(#uix_meter_value); 
  ui_pop();
  
  gfx_ui_margins(0, 8, 0, 8);

  ui_push();
    gfx_ui_margins(0, 10, 0, 10);
    
    gfx_set(0.078,0.078,0.078);
    gfx_rect(ui_left(), ui_top(), ui_width(), ui_height());
    ui_split_leftratio(1/2);
	 gfx_ui_margins(1, 0.5,1, 0.5);
	 gfx_ui_meter(this.l.value);
    ui_split_next();
	 gfx_ui_margins(1, 0.5,1, 0.5);
	 gfx_ui_meter(this.r.value);
    ui_pop();
	  
  ui_pop();
  
  height = ui_height();
  handle_height = uix_control_slider_handle_height();
    
  p = gfx_ui_meter_calc_relative_pos(range_high);
  ui_split_top(height * (1-p) - handle_height/2);
    //ui_color(120, 120, 120, 0.4);
    //ui_fill();
  ui_pop();
    
  p = gfx_ui_meter_calc_relative_pos(range_low);
  ui_split_bottom(height * p - handle_height/2);
    //ui_color(0, 0, 0, 0.2);
    //ui_fill();
  ui_pop();
  uix_control_slider_v(value, range_low, range_high, curve_bias, hasDefault, defaultValue, 0, 0);
);

// draw vu meter:
// - meter numbers:
//   - 1 - draw numbers on the left, short lines
//   - 2 - draw numbers on the left, long lines
//   - 3 - draw line extensions
function gfx_ui_meter_numbers2(meter_numbers)
	local(x, y, w, h, i, scale, cv, num, cy, offset, x1, x2) (
  num = 10;
  scale = (vu.meter_floor - vu.meter_ceil) / (num + 1);
  cv = 0;
  i = 1;
  x = ui_left();
  y = ui_top();
  w = ui_width();
  h = ui_height();
  x1 = meter_numbers == 3 ? x : x+25;
  x2 = x+w + (meter_numbers == 1 ? -25 : (meter_numbers == 3 ? -35 : 0));
  
  ui_fontsize(13);    
  ui_color_text_dim();
  while(
    cy = y + i * h / (num+1);
    gfx_line(x1, cy, x2, cy, 1);
    sprintf(#uix_meter_scale, "%.0f", abs(cv));
    meter_numbers != 3 ? (
	 gfx_x = ui_left() + 5;
	 gfx_y = cy-10;
	 gfx_drawstr(#uix_meter_scale, 2+4, x + 20, cy+10);
    );
    cv += scale;
    i += 1;
    i <= num;
  )
);

function gfx_ui_metermargins(meter_numbers) (
	meter_numbers > 0 && meter_numbers < 3 ? (
		  gfx_ui_margins(0, 8, 0, 30);
		) : (meter_numbers == 3 ? (
		gfx_ui_margins(0, 30, 0, 8);
		));
);

function gfx_ui_stereometer2(name, meter_numbers) local(sumvalue valueClipped) (
  ui_split_top(30);
    gfx_ui_metermargins(meter_numbers);
    ui_color_text();
    ui_text(name);
  ui_pop();
  
  ui_split_bottom(30);
    gfx_ui_metermargins(meter_numbers);
    ui_color_text();
    sumvalue = this.sum.value;
    valueClipped = (sumvalue < vu.meter_floor ? vu.meter_floor : sumvalue);
    sprintf(#uix_meter_value, "%.1f", valueClipped);
    ui_text(#uix_meter_value); 
  ui_pop();
  
  meter_numbers ? (
    ui_push();
	  gfx_ui_meter_numbers2(meter_numbers);
    ui_pop();
  );
  gfx_ui_metermargins(meter_numbers);
  
  gfx_set(0.078,0.078,0.078);
  gfx_rect(ui_left(), ui_top(), ui_width(), ui_height());
  ui_split_leftratio(1/2);
    gfx_ui_margins(1, 0.5,1, 0.5);
    gfx_ui_meter(this.l.value);
  ui_split_next();
    gfx_ui_margins(1, 0.5,1, 0.5);
    gfx_ui_meter(this.r.value);
  ui_pop();
);

function gfx_ui_slider(slidervar*, low, high, step, title, format) (
  ui_split_top(30);
    //gfx_ui_metermargins(meter_numbers);
    ui_color_text();
    ui_text(title);
  ui_pop();
  
  ui_split_bottom(30);
    //gfx_ui_metermargins(meter_numbers);
    ui_color_text();
    sprintf(#uix_slider_value, format, slidervar);
    ui_text(#uix_slider_value); 
  ui_pop();
  
  
  gfx_ui_margins(0, 15, 0, 15);
  uix_control_slider_v(slidervar, low, high, 0, 0, 0, 0, 1);
  //ui_debug();
);

ui_start("main");
ui_screen() == "main" ? (
 
  ui_color(48, 48, 48);
  ui_color(38, 38, 38);
  ui_fill();   
  ui_color(200, 200, 200);
  
  ui_split_right(150);
    ui_color(38, 38, 38);
    ui_fill();
    
    gfx_ui_margins(20, 15, 20, 15);
    ui_split_leftratio(1/2);
	 //vu_in.gfx_ui_stereometer("In");
	 vu_out.gfx_ui_stereometer2("Out", 1);
	 
    ui_split_next();
	 slider6 = gfx_ui_slider(slider6, -6, 0, 0.1, "Limit", "%.01f dB");
	//vu_in.gfx_ui_stereometer2("In", 3);
    ui_pop();
  ui_pop();
  
  ui_split_bottom(50);
    ui_split_leftratio(0.5);
	 //sprintf(#uix_gfx_size, "%.0fx%.0f", gfx_w,gfx_h);
	 //ui_text(#uix_gfx_size); 
    ui_split_next();
	    ui_split_right(15);
	    ui_pop();
	    ui_color(160, 160, 160);
	    ui_align(1,0.5);
	    ui_text("Master Limiter [LOSER]");
    ui_pop();
  ui_pop();
   
  
  ui_split_left(120);
	gfx_ui_margins(0,2,0,0);
	
	ui_color(48, 48, 48);
	ui_fill();
	
	gfx_ui_margins(25, 30, 25, 30);
	slider1 = vu_in.gfx_ui_stereometer_slider("Threshold", slider1, -20, -0.1, 0, 1, -3, "%.1f dB");
	 
  ui_pop();
  
  gfx_ui_margins(0,2,0,2);
  ui_color(48, 48, 48);
  ui_fill();
  
  ui_split_leftratio(0.5);
    ui_split_left(60);
    ui_pop();
    
    ui_split_topratio(0.5);
	 gfx_ui_margins(5,5,5,5);
	 slider2 = gfx_ui_knob(slider2, 0, 1000, 0, "Look Ahead", "%.0f Âµs"); 
    ui_split_next();
	 gfx_ui_margins(5,5,5,5);
	 slider3 = gfx_ui_knob(slider3, 0, 1000, 0, "Attack", "%.0f Âµs");
    ui_pop();
  ui_split_next(); 
    ui_split_right(60);
    ui_pop();
    
    ui_split_topratio(0.5);
	 gfx_ui_margins(5,5,5,5);
	 slider4 = gfx_ui_knob(slider4, 0, 10, 0.1, "Hold", "%.1f ms"); 
    ui_split_next();
	 gfx_ui_margins(5,5,5,5);
	 slider5 = gfx_ui_knob(slider5, 0, 1000, 0.1, "Release", "%.1f ms");
    ui_pop();

  ui_pop();
  
  (slider1 != old_slider1 || 
   slider2 != old_slider2 ||
   slider3 != old_slider3 ||
   slider4 != old_slider4 ||
   slider5 != old_slider5 ||
   slider6 != old_slider6) ? (
	 old_slider1 = slider1; 
	 old_slider2 = slider2;
	 old_slider3 = slider3;
	 old_slider4 = slider4;
	 old_slider5 = slider5;
	 old_slider6 = slider6;
    slider_recalc();
  )
)
